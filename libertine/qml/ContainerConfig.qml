/**
 * @file libertine.qml
 * @brief Libertine app main view.
 */
/*
 * Copyright 2015 Canonical Ltd
 *
 * Libertine is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, version 3, as published by the
 * Free Software Foundation.
 *
 * Libertine is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import QtQuick 2.4
import U1db 1.0 as U1db


Item {

    U1db.Index {
        id: byContainerId
        database: configDB
        expression: [ "container" ]
    }

    U1db.Query {
        id: containerQuery
        index: byContainerId
        query: ["*"]
    }

    /**
     * Gets a collection of all known containers.
     */
    function getContainers() {
        var containers = []
        var queryResults = containerQuery.results
        for (var i in queryResults)
            containers.push(queryResults[i].container)
        return containers
    }

    /**
     * Generates a unique container id and name.
     *
     * If the container id (and name) already exist in the database, a new
     * unique id and name are generated by incrementing a numeric suffix.
     */
    function generateContainerNames(imageSource) {
        var containerId = imageSource.id
        var containerName = imageSource.name
        var bis = 0
        var re = /^(\w*)(?:-(\d+))?$/
        var containers = getContainers()
        for (var i in containers) {
            var match = re.exec(containers[i].containerId)
            if (match && match[1] === imageSource.id) {
                var val = Number(match[2])
                if (val != NaN && val > 0) {
                    bis = (val > bis ? val : bis)
                }
                ++bis
            }
        }
        if (bis > 0) {
            containerId += "-" + bis
            containerName += " (" + bis + ")"
        }
        return { containerId: containerId, containerName: containerName }
    }

    /**
     * Gets the container marked as the default container.
     */
    function getDefaultContainer() {
        var containers = getContainers()
        for (var i in containers) {
            if (containers[i].isDefault)
                return containers[i]
        }
        return undefined
    }

    /**
     * Indicates if there any defined containers at all.
     */
    function hasContainers() {
        var containers = getContainers()
        return containers.length > 0
    }

    /**
     * Adds a new container to the databsae.
     */
    function addNewContainer(imageSource) {
        var containerNames = generateContainerNames(imageSource)
        var newConfig = {
            "container": {
                containerId:    containerNames.containerId,
                imageId:        imageSource.id,
                name:           containerNames.containerName,
                installStatus:  "NEW",
                isDefault:      false
            }
        }
        configDB.putDoc(newConfig)
    }
}
